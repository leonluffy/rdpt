#define LOGCYCBUFF_SIZE		(8 * 1024 * 1024)

static struct {
	char			file[256];
	unsigned long long		b, e;
	char			buf[LOGCYCBUFF_SIZE];
#ifdef WIN32
	HANDLE			lock;
#else
	pthread_mutex_t	lock;
#endif
	int				initdone;
} loginfo = {{}};

static void log_insert(const char *buf, unsigned len)
{
	unsigned b_off, left, half;
	unsigned long long b_cur;

	if (loginfo.initdone == 0)
		return;

#ifdef WIN32
	WaitForSingleObject(loginfo.lock, INFINITE);
#else
	pthread_mutex_lock(&(loginfo.lock));
#endif
	b_cur = loginfo.b;
	if ((b_cur + len - loginfo.e) > LOGCYCBUFF_SIZE)
	{
#ifdef WIN32
		ReleaseMutex(loginfo.lock);
#else
		pthread_mutex_unlock(&(loginfo.lock));
#endif
		return;
	}
	loginfo.b += len;
#ifdef WIN32
	ReleaseMutex(loginfo.lock);
#else
	pthread_mutex_unlock(&(loginfo.lock));
#endif

	b_off = (unsigned)(b_cur % LOGCYCBUFF_SIZE);
	left = LOGCYCBUFF_SIZE - b_off;
	half = len < left ? len : left;
	if (half)
		memcpy(loginfo.buf + b_off, buf, half);

	left = len - half;
	if (left)
		memcpy(loginfo.buf, buf + half, left);
}

#ifdef WIN32
static void CALLBACK log_writefile(
  HWND     hwnd,
  UINT     uMsg,
  UINT_PTR idEvent,
  DWORD    dwTime
)
#else
static void log_writefile(void *param, cpkl_tmestate_e state)
#endif
{
	int half, left, e_off = (int)(loginfo.e % LOGCYCBUFF_SIZE);
	int len = (int)(loginfo.b - loginfo.e);

	if (len == 0)
		return;

	FILE *fp = fopen(loginfo.file, "ab");
	if (fp == NULL)
	{
		return;
	}

	left = LOGCYCBUFF_SIZE - e_off;
	half = len < left ? len : left;
	if (half)
		fwrite(loginfo.buf + e_off, half, 1, fp);

	left = len - half;
	if (left)
		fwrite(loginfo.buf, left, 1, fp);

	fclose(fp);

	loginfo.e += len;
}

#ifdef WIN32
void mms_log_init(const char *dir, HWND hwnd)
#else
void mms_log_init(const char *dir)
#endif
{
	time_t currentTime;
	currentTime = time(NULL);
	struct tm *p;
	p = localtime(&currentTime);

	memset(loginfo.file, 0, sizeof(loginfo.file));
	sprintf(loginfo.file,
		"%04d%02d%02d-%02d%02d%02d.log",
		p->tm_year + 1900, p->tm_mon + 1, p->tm_mday,
		p->tm_hour, p->tm_min, p->tm_sec);

	loginfo.b = loginfo.e = 0;
	loginfo.initdone = 1;
#ifdef WIN32
	loginfo.lock = CreateMutex(NULL, FALSE, NULL);
	SetTimer(hwnd, 3, 500, log_writefile);
#else
	pthread_mutex_init(&loginfo.lock, NULL);
	// cpkl_tmreg(5, log_writefile, NULL);
#endif
}